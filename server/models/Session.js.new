import BaseModel from './BaseModel.js';
import db from '../db/index.js';

class Session extends BaseModel {
  constructor() {
    super('sessions');
  }

  async findByKidId(kidId) {
    try {
      console.log(`Finding sessions for kid with ID: ${kidId}`);
      const query = `
        SELECT s.*, 
          hr.subject, hr.type, hr.description,
          k.name AS kid_name, 
          k.whatsapp_number AS kid_whatsapp_number,
          v.name AS volunteer_name,
          v.whatsapp_number AS volunteer_whatsapp_number
        FROM ${this.table} s
        LEFT JOIN help_requests hr ON s.request_id = hr.id
        LEFT JOIN users k ON s.kid_id = k.id
        LEFT JOIN users v ON s.volunteer_id = v.id
        WHERE s.kid_id = $1
        ORDER BY s.scheduled_time DESC
      `;
      console.log('Executing query:', query.replace(/\s+/g, ' ').trim());
      
      const result = await this.query(query, [kidId]);
      console.log(`Found ${result.length} sessions for kid`);
      return result;
    } catch (error) {
      console.error('Error finding sessions for kid:', error);
      return [];
    }
  }

  async findByVolunteerId(volunteerId) {
    try {
      console.log(`Finding sessions for volunteer with ID: ${volunteerId}`);
      const query = `
        SELECT s.*, 
          hr.subject, hr.type, hr.description,
          k.name AS kid_name, 
          k.whatsapp_number AS kid_whatsapp_number,
          v.name AS volunteer_name,
          v.whatsapp_number AS volunteer_whatsapp_number
        FROM ${this.table} s
        LEFT JOIN help_requests hr ON s.request_id = hr.id
        LEFT JOIN users k ON s.kid_id = k.id
        LEFT JOIN users v ON s.volunteer_id = v.id
        WHERE s.volunteer_id = $1
        ORDER BY s.scheduled_time DESC
      `;
      console.log('Executing query:', query.replace(/\s+/g, ' ').trim());
      
      const result = await this.query(query, [volunteerId]);
      console.log(`Found ${result.length} sessions for volunteer`);
      return result;
    } catch (error) {
      console.error('Error finding sessions for volunteer:', error);
      return [];
    }
  }

  async findById(sessionId) {
    try {
      console.log(`Finding session with ID: ${sessionId}`);
      const query = `
        SELECT s.*, 
          hr.subject, hr.type, hr.description,
          k.name AS kid_name, 
          k.whatsapp_number AS kid_whatsapp_number,
          v.name AS volunteer_name,
          v.whatsapp_number AS volunteer_whatsapp_number
        FROM ${this.table} s
        LEFT JOIN help_requests hr ON s.request_id = hr.id
        LEFT JOIN users k ON s.kid_id = k.id
        LEFT JOIN users v ON s.volunteer_id = v.id
        WHERE s.id = $1
      `;
      
      const results = await this.query(query, [sessionId]);
      return results[0] || null;
    } catch (error) {
      console.error('Error finding session by ID:', error);
      return null;
    }
  }

  async createFromHelpRequest(requestId, kidId, volunteerId, scheduledTime) {
    try {
      console.log(`Creating session from request ID: ${requestId}`);
      console.log(`Data:`, { requestId, kidId, volunteerId, scheduledTime });
      
      const session = await this.create({
        request_id: requestId,
        kid_id: kidId,
        volunteer_id: volunteerId,
        scheduled_time: scheduledTime,
        status: 'scheduled'
      });
      
      console.log('Session created:', session);
      return session;
    } catch (error) {
      console.error('Error creating session from help request:', error);
      throw error;
    }
  }

  async submitFeedback(sessionId, userType, userId, rating, feedback) {
    try {
      let ratingField, feedbackField;
      
      if (userType === 'kid') {
        ratingField = 'volunteer_rating';
        feedbackField = 'volunteer_feedback';
      } else {
        ratingField = 'kid_rating';
        feedbackField = 'kid_feedback';
      }
      
      const result = await db.query(
        `UPDATE ${this.table}
         SET ${ratingField} = $1, 
             ${feedbackField} = $2,
             updated_at = NOW()
         WHERE id = $3 AND (kid_id = $4 OR volunteer_id = $4)
         RETURNING *`,
        [rating, feedback, sessionId, userId]
      );
      
      return result.rows[0];
    } catch (error) {
      console.error('Error submitting feedback:', error);
      return null;
    }
  }
}

export default new Session();
